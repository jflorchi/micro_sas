
micro_sas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c14  08002c14  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002c14  08002c14  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c14  08002c14  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000014  08002c30  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002c30  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006917  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c5  00000000  00000000  00026953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00027d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  000283d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017343  00000000  00000000  000289e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007907  00000000  00000000  0003fd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000857c6  00000000  00000000  0004762a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccdf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f4  00000000  00000000  000cce40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bcc 	.word	0x08002bcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002bcc 	.word	0x08002bcc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc47 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8d1 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f99f 	bl	8000570 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f95f 	bl	80004f4 <MX_SPI1_Init>
  MX_CAN_Init();
 8000236:	f000 f907 	bl	8000448 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  ENABLE_CAN_TRANSCEIVER();
 800023a:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <main+0x180>)
 800023c:	2200      	movs	r2, #0
 800023e:	2102      	movs	r1, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fb97 	bl	8001974 <HAL_GPIO_WritePin>

  LED_OFF();
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fb90 	bl	8001974 <HAL_GPIO_WritePin>
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <main+0x184>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fea6 	bl	8000fa8 <HAL_CAN_Start>
 800025c:	1e03      	subs	r3, r0, #0
 800025e:	d006      	beq.n	800026e <main+0x4e>
	  LED_ON();
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fb83 	bl	8001974 <HAL_GPIO_WritePin>
  }

  zeroPos = getRawRotation();
 800026e:	f000 fa09 	bl	8000684 <getRawRotation>
 8000272:	0003      	movs	r3, r0
 8000274:	001a      	movs	r2, r3
 8000276:	4b4c      	ldr	r3, [pc, #304]	; (80003a8 <main+0x188>)
 8000278:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  readCAN();
 800027a:	f000 fad3 	bl	8000824 <readCAN>

	  uint16_t rawAngle = getRawRotation();
 800027e:	2516      	movs	r5, #22
 8000280:	197c      	adds	r4, r7, r5
 8000282:	f000 f9ff 	bl	8000684 <getRawRotation>
 8000286:	0003      	movs	r3, r0
 8000288:	8023      	strh	r3, [r4, #0]
	  int angleDelta = ABS(rawAngle - lastAngle);
 800028a:	0029      	movs	r1, r5
 800028c:	187b      	adds	r3, r7, r1
 800028e:	881a      	ldrh	r2, [r3, #0]
 8000290:	4b46      	ldr	r3, [pc, #280]	; (80003ac <main+0x18c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d005      	beq.n	80002a4 <main+0x84>
 8000298:	187b      	adds	r3, r7, r1
 800029a:	881a      	ldrh	r2, [r3, #0]
 800029c:	4b43      	ldr	r3, [pc, #268]	; (80003ac <main+0x18c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	e005      	b.n	80002b0 <main+0x90>
 80002a4:	4b41      	ldr	r3, [pc, #260]	; (80003ac <main+0x18c>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	2316      	movs	r3, #22
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	1ad3      	subs	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
	  if (angleDelta > 10000) { // wrapped around
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	4a3e      	ldr	r2, [pc, #248]	; (80003b0 <main+0x190>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	dd13      	ble.n	80002e2 <main+0xc2>
		  // steering wheel turning right = rawAngle decreasing due to my mount
		  if (rawAngle > lastAngle) { // turning right
 80002ba:	2316      	movs	r3, #22
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	881a      	ldrh	r2, [r3, #0]
 80002c0:	4b3a      	ldr	r3, [pc, #232]	; (80003ac <main+0x18c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d906      	bls.n	80002d6 <main+0xb6>
			  currentAngle -= 16383;
 80002c8:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <main+0x194>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a3a      	ldr	r2, [pc, #232]	; (80003b8 <main+0x198>)
 80002ce:	189a      	adds	r2, r3, r2
 80002d0:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <main+0x194>)
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	e005      	b.n	80002e2 <main+0xc2>
		  } else {
			  currentAngle += 16383;
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <main+0x194>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a38      	ldr	r2, [pc, #224]	; (80003bc <main+0x19c>)
 80002dc:	189a      	adds	r2, r3, r2
 80002de:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <main+0x194>)
 80002e0:	601a      	str	r2, [r3, #0]
		  }
	  }
	  int computedAngle = rawAngle + currentAngle - zeroPos;
 80002e2:	2316      	movs	r3, #22
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	881a      	ldrh	r2, [r3, #0]
 80002e8:	4b32      	ldr	r3, [pc, #200]	; (80003b4 <main+0x194>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	18d3      	adds	r3, r2, r3
 80002ee:	4a2e      	ldr	r2, [pc, #184]	; (80003a8 <main+0x188>)
 80002f0:	8812      	ldrh	r2, [r2, #0]
 80002f2:	1a9b      	subs	r3, r3, r2
 80002f4:	60fb      	str	r3, [r7, #12]
	  if (computedAngle > 49149 || computedAngle < -49149) { // check sane (3 full rotations)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4a31      	ldr	r2, [pc, #196]	; (80003c0 <main+0x1a0>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	dc03      	bgt.n	8000306 <main+0xe6>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4a30      	ldr	r2, [pc, #192]	; (80003c4 <main+0x1a4>)
 8000302:	4293      	cmp	r3, r2
 8000304:	da07      	bge.n	8000316 <main+0xf6>
		  SET_ERROR(2);
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <main+0x1a8>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2204      	movs	r2, #4
 800030c:	4313      	orrs	r3, r2
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <main+0x1a8>)
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	e006      	b.n	8000324 <main+0x104>
	  } else {
		  CLEAR_ERROR(2);
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <main+0x1a8>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2204      	movs	r2, #4
 800031c:	4393      	bics	r3, r2
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <main+0x1a8>)
 8000322:	701a      	strb	r2, [r3, #0]
	  }

	  uint8_t txBuffer[] = {(computedAngle >> 24) & 0xFF,
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	0e1b      	lsrs	r3, r3, #24
 8000328:	b2da      	uxtb	r2, r3
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	701a      	strb	r2, [r3, #0]
			  (computedAngle >> 16) & 0xFF, (computedAngle >> 8) & 0xFF, computedAngle & 0xFF,
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	141b      	asrs	r3, r3, #16
	  uint8_t txBuffer[] = {(computedAngle >> 24) & 0xFF,
 8000332:	b2da      	uxtb	r2, r3
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	705a      	strb	r2, [r3, #1]
			  (computedAngle >> 16) & 0xFF, (computedAngle >> 8) & 0xFF, computedAngle & 0xFF,
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	121b      	asrs	r3, r3, #8
	  uint8_t txBuffer[] = {(computedAngle >> 24) & 0xFF,
 800033c:	b2da      	uxtb	r2, r3
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	709a      	strb	r2, [r3, #2]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	70da      	strb	r2, [r3, #3]
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2200      	movs	r2, #0
 800034e:	711a      	strb	r2, [r3, #4]
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	715a      	strb	r2, [r3, #5]
			  0x00, 0x00, (rawAngle & 0xFF00) >> 8, rawAngle & 0x00FF};
 8000356:	2416      	movs	r4, #22
 8000358:	193b      	adds	r3, r7, r4
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	b29b      	uxth	r3, r3
	  uint8_t txBuffer[] = {(computedAngle >> 24) & 0xFF,
 8000360:	b2da      	uxtb	r2, r3
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	719a      	strb	r2, [r3, #6]
 8000366:	193b      	adds	r3, r7, r4
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	71da      	strb	r2, [r3, #7]
	  sendCAN(0x23, txBuffer, 8); // steering angle message
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2208      	movs	r2, #8
 8000374:	0019      	movs	r1, r3
 8000376:	2023      	movs	r0, #35	; 0x23
 8000378:	f000 f9c6 	bl	8000708 <sendCAN>

	  uint8_t errBuffer[1] = {errors};
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0x1a8>)
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	003b      	movs	r3, r7
 8000382:	701a      	strb	r2, [r3, #0]
	  sendCAN(0x699, errBuffer, 1); // error flags
 8000384:	003b      	movs	r3, r7
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <main+0x1ac>)
 8000388:	2201      	movs	r2, #1
 800038a:	0019      	movs	r1, r3
 800038c:	f000 f9bc 	bl	8000708 <sendCAN>

	  lastAngle = rawAngle;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	881a      	ldrh	r2, [r3, #0]
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <main+0x18c>)
 8000396:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f000 fbf1 	bl	8000b80 <HAL_Delay>
  while (1) {
 800039e:	e76c      	b.n	800027a <main+0x5a>
 80003a0:	48000400 	.word	0x48000400
 80003a4:	20000030 	.word	0x20000030
 80003a8:	200000ec 	.word	0x200000ec
 80003ac:	200000f4 	.word	0x200000f4
 80003b0:	00002710 	.word	0x00002710
 80003b4:	200000f0 	.word	0x200000f0
 80003b8:	ffffc001 	.word	0xffffc001
 80003bc:	00003fff 	.word	0x00003fff
 80003c0:	0000bffd 	.word	0x0000bffd
 80003c4:	ffff4003 	.word	0xffff4003
 80003c8:	200000bc 	.word	0x200000bc
 80003cc:	00000699 	.word	0x00000699

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b093      	sub	sp, #76	; 0x4c
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2334      	movs	r3, #52	; 0x34
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f002 fbeb 	bl	8002bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	0018      	movs	r0, r3
 80003ea:	2310      	movs	r3, #16
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f002 fbe4 	bl	8002bbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	193b      	adds	r3, r7, r4
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fad1 	bl	80019b0 <HAL_RCC_OscConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000412:	f000 fa27 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2207      	movs	r2, #7
 800041a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2201      	movs	r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fe42 	bl	80020bc <HAL_RCC_ClockConfig>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800043c:	f000 fa12 	bl	8000864 <Error_Handler>
  }
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b013      	add	sp, #76	; 0x4c
 8000446:	bd90      	pop	{r4, r7, pc}

08000448 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800044c:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <MX_CAN_Init+0xa0>)
 800044e:	4a27      	ldr	r2, [pc, #156]	; (80004ec <MX_CAN_Init+0xa4>)
 8000450:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000454:	2202      	movs	r2, #2
 8000456:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <MX_CAN_Init+0xa0>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000466:	2290      	movs	r2, #144	; 0x90
 8000468:	0312      	lsls	r2, r2, #12
 800046a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_CAN_Init+0xa0>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000472:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000474:	2200      	movs	r2, #0
 8000476:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_CAN_Init+0xa0>)
 800047a:	2200      	movs	r2, #0
 800047c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000480:	2200      	movs	r2, #0
 8000482:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000486:	2201      	movs	r2, #1
 8000488:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_CAN_Init+0xa0>)
 800048c:	2200      	movs	r2, #0
 800048e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000492:	2200      	movs	r2, #0
 8000494:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_CAN_Init+0xa0>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fb95 	bl	8000bc8 <HAL_CAN_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80004a2:	f000 f9df 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	61da      	str	r2, [r3, #28]
  canfil.FilterIdHigh = 0x0000;
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  canfil.FilterFIFOAssignment = 0;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  canfil.FilterActivation = ENABLE;
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &canfil);
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <MX_CAN_Init+0xa8>)
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <MX_CAN_Init+0xa0>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fc71 	bl	8000dc4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000030 	.word	0x20000030
 80004ec:	40006400 	.word	0x40006400
 80004f0:	200000c0 	.word	0x200000c0

080004f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_SPI1_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_SPI1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_SPI1_Init+0x74>)
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	0052      	lsls	r2, r2, #1
 8000504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_SPI1_Init+0x74>)
 800050e:	22f0      	movs	r2, #240	; 0xf0
 8000510:	0112      	lsls	r2, r2, #4
 8000512:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_SPI1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_SPI1_Init+0x74>)
 800051c:	2201      	movs	r2, #1
 800051e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_SPI1_Init+0x74>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_SPI1_Init+0x74>)
 800052a:	2220      	movs	r2, #32
 800052c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_SPI1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_SPI1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_SPI1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_SPI1_Init+0x74>)
 8000542:	2207      	movs	r2, #7
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_SPI1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_SPI1_Init+0x74>)
 8000554:	0018      	movs	r0, r3
 8000556:	f001 ff0d 	bl	8002374 <HAL_SPI_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f981 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000058 	.word	0x20000058
 800056c:	40013000 	.word	0x40013000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b089      	sub	sp, #36	; 0x24
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	240c      	movs	r4, #12
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2314      	movs	r3, #20
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fb1b 	bl	8002bbc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <MX_GPIO_Init+0x10c>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b3c      	ldr	r3, [pc, #240]	; (800067c <MX_GPIO_Init+0x10c>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	03c9      	lsls	r1, r1, #15
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <MX_GPIO_Init+0x10c>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	03db      	lsls	r3, r3, #15
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b36      	ldr	r3, [pc, #216]	; (800067c <MX_GPIO_Init+0x10c>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <MX_GPIO_Init+0x10c>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0289      	lsls	r1, r1, #10
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b32      	ldr	r3, [pc, #200]	; (800067c <MX_GPIO_Init+0x10c>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	029b      	lsls	r3, r3, #10
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <MX_GPIO_Init+0x10c>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_GPIO_Init+0x10c>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	02c9      	lsls	r1, r1, #11
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_GPIO_Init+0x10c>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	02db      	lsls	r3, r3, #11
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005da:	2390      	movs	r3, #144	; 0x90
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f9c6 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005e8:	2390      	movs	r3, #144	; 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f9bf 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_GPIO_Init+0x110>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f9b9 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2204      	movs	r2, #4
 8000606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	193a      	adds	r2, r7, r4
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f83e 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2210      	movs	r2, #16
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2203      	movs	r2, #3
 800063e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	193a      	adds	r2, r7, r4
 8000642:	2390      	movs	r3, #144	; 0x90
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f82b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	187b      	adds	r3, r7, r1
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <MX_GPIO_Init+0x110>)
 800066c:	0019      	movs	r1, r3
 800066e:	0010      	movs	r0, r2
 8000670:	f001 f818 	bl	80016a4 <HAL_GPIO_Init>

}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b009      	add	sp, #36	; 0x24
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400

08000684 <getRawRotation>:

/* USER CODE BEGIN 4 */

uint16_t getRawRotation() {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af02      	add	r7, sp, #8
	for (i = 0; i < op_num; i++) {
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <getRawRotation+0x70>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e023      	b.n	80006da <getRawRotation+0x56>
		__AS5048A2_CS_ENABLE();
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f96a 	bl	8001974 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, &SPI_TX_DATA[i], (uint8_t*) &SPI_RX_DATA[i], 1, 2710);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <getRawRotation+0x70>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	005a      	lsls	r2, r3, #1
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <getRawRotation+0x74>)
 80006a8:	18d1      	adds	r1, r2, r3
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <getRawRotation+0x70>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	005a      	lsls	r2, r3, #1
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <getRawRotation+0x78>)
 80006b2:	18d2      	adds	r2, r2, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <getRawRotation+0x7c>)
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <getRawRotation+0x80>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	f001 ff12 	bl	80024e4 <HAL_SPI_TransmitReceive>
		__AS5048A2_CS_DISABLE();
 80006c0:	2390      	movs	r3, #144	; 0x90
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f953 	bl	8001974 <HAL_GPIO_WritePin>
	for (i = 0; i < op_num; i++) {
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <getRawRotation+0x70>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <getRawRotation+0x70>)
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <getRawRotation+0x70>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2204      	movs	r2, #4
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d3d6      	bcc.n	8000692 <getRawRotation+0xe>
	}
	return SPI_RX_DATA[3] & 0x3fff;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <getRawRotation+0x78>)
 80006e6:	88db      	ldrh	r3, [r3, #6]
 80006e8:	049b      	lsls	r3, r3, #18
 80006ea:	0c9b      	lsrs	r3, r3, #18
 80006ec:	b29b      	uxth	r3, r3
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000100 	.word	0x20000100
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200000f8 	.word	0x200000f8
 8000700:	20000058 	.word	0x20000058
 8000704:	00000a96 	.word	0x00000a96

08000708 <sendCAN>:

uint32_t sendCAN(uint16_t id, uint8_t buffer[], uint8_t len) {
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6039      	str	r1, [r7, #0]
 8000710:	0011      	movs	r1, r2
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	1c02      	adds	r2, r0, #0
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	1d7b      	adds	r3, r7, #5
 800071a:	1c0a      	adds	r2, r1, #0
 800071c:	701a      	strb	r2, [r3, #0]
	CAN_TxHeaderTypeDef header;

	header.IDE = CAN_ID_STD;
 800071e:	250c      	movs	r5, #12
 8000720:	197b      	adds	r3, r7, r5
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	header.RTR = CAN_RTR_DATA;
 8000726:	197b      	adds	r3, r7, r5
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
	header.TransmitGlobalTime = DISABLE;
 800072c:	197b      	adds	r3, r7, r5
 800072e:	2200      	movs	r2, #0
 8000730:	751a      	strb	r2, [r3, #20]
	header.DLC = len;
 8000732:	1d7b      	adds	r3, r7, #5
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	197b      	adds	r3, r7, r5
 8000738:	611a      	str	r2, [r3, #16]
	header.StdId = id;
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	197b      	adds	r3, r7, r5
 8000740:	601a      	str	r2, [r3, #0]

	uint32_t mailbox;

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <sendCAN+0xd8>)
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fd53 	bl	80011f0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d02c      	beq.n	80007a8 <sendCAN+0xa0>
		uint8_t res = HAL_CAN_AddTxMessage(&hcan, &header, buffer, &mailbox);
 800074e:	2627      	movs	r6, #39	; 0x27
 8000750:	19bc      	adds	r4, r7, r6
 8000752:	2308      	movs	r3, #8
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	1979      	adds	r1, r7, r5
 800075a:	4821      	ldr	r0, [pc, #132]	; (80007e0 <sendCAN+0xd8>)
 800075c:	f000 fc6a 	bl	8001034 <HAL_CAN_AddTxMessage>
 8000760:	0003      	movs	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
		if (res != HAL_OK) {
 8000764:	19bb      	adds	r3, r7, r6
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00e      	beq.n	800078a <sendCAN+0x82>
			SET_ERROR(0);
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <sendCAN+0xdc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4313      	orrs	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <sendCAN+0xdc>)
 8000778:	701a      	strb	r2, [r3, #0]
			LED_ON();
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2201      	movs	r2, #1
 8000780:	2104      	movs	r1, #4
 8000782:	0018      	movs	r0, r3
 8000784:	f001 f8f6 	bl	8001974 <HAL_GPIO_WritePin>
 8000788:	e025      	b.n	80007d6 <sendCAN+0xce>
		} else {
			CLEAR_ERROR(0);
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <sendCAN+0xdc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2201      	movs	r2, #1
 8000790:	4393      	bics	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <sendCAN+0xdc>)
 8000796:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8000798:	2390      	movs	r3, #144	; 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f8e7 	bl	8001974 <HAL_GPIO_WritePin>
 80007a6:	e016      	b.n	80007d6 <sendCAN+0xce>
		}
	} else {
		if (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)) {
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <sendCAN+0xe0>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <sendCAN+0xd8>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fd55 	bl	8001260 <HAL_CAN_IsTxMessagePending>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d00d      	beq.n	80007d6 <sendCAN+0xce>
			SET_ERROR(1);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <sendCAN+0xdc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2202      	movs	r2, #2
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <sendCAN+0xdc>)
 80007c6:	701a      	strb	r2, [r3, #0]
			LED_ON();
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 f8cf 	bl	8001974 <HAL_GPIO_WritePin>
		}
	}

	return mailbox;
 80007d6:	68bb      	ldr	r3, [r7, #8]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b00b      	add	sp, #44	; 0x2c
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e0:	20000030 	.word	0x20000030
 80007e4:	200000bc 	.word	0x200000bc
 80007e8:	200000e8 	.word	0x200000e8

080007ec <getRX0Count>:

uint32_t getRX0Count() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	return HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <getRX0Count+0x18>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fe76 	bl	80014e6 <HAL_CAN_GetRxFifoFillLevel>
 80007fa:	0003      	movs	r3, r0
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000030 	.word	0x20000030

08000808 <getRX1Count>:

uint32_t getRX1Count() {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	return HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1);
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <getRX1Count+0x18>)
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fe68 	bl	80014e6 <HAL_CAN_GetRxFifoFillLevel>
 8000816:	0003      	movs	r3, r0
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000030 	.word	0x20000030

08000824 <readCAN>:

void readCAN() {
 8000824:	b580      	push	{r7, lr}
 8000826:	b092      	sub	sp, #72	; 0x48
 8000828:	af00      	add	r7, sp, #0
	if (getRX0Count() > 0) {
 800082a:	f7ff ffdf 	bl	80007ec <getRX0Count>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d007      	beq.n	8000842 <readCAN+0x1e>
		CAN_RxHeaderTypeDef tmp;
		uint8_t data[8];
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &tmp, data);
 8000832:	2324      	movs	r3, #36	; 0x24
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	222c      	movs	r2, #44	; 0x2c
 8000838:	18ba      	adds	r2, r7, r2
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <readCAN+0x3c>)
 800083c:	2100      	movs	r1, #0
 800083e:	f000 fd36 	bl	80012ae <HAL_CAN_GetRxMessage>
	}
	if (getRX1Count() > 0) {
 8000842:	f7ff ffe1 	bl	8000808 <getRX1Count>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d006      	beq.n	8000858 <readCAN+0x34>
		CAN_RxHeaderTypeDef tmp;
		uint8_t data[8];
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &tmp, data);
 800084a:	003b      	movs	r3, r7
 800084c:	2208      	movs	r2, #8
 800084e:	18ba      	adds	r2, r7, r2
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <readCAN+0x3c>)
 8000852:	2100      	movs	r1, #0
 8000854:	f000 fd2b 	bl	80012ae <HAL_CAN_GetRxMessage>
	}
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b012      	add	sp, #72	; 0x48
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000030 	.word	0x20000030

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x50>)
 8000878:	699a      	ldr	r2, [r3, #24]
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_MspInit+0x50>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	619a      	str	r2, [r3, #24]
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x50>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x50>)
 8000890:	69da      	ldr	r2, [r3, #28]
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_MspInit+0x50>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	0549      	lsls	r1, r1, #21
 8000898:	430a      	orrs	r2, r1
 800089a:	61da      	str	r2, [r3, #28]
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x50>)
 800089e:	69da      	ldr	r2, [r3, #28]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	055b      	lsls	r3, r3, #21
 80008a4:	4013      	ands	r3, r2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x54>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_MspInit+0x54>)
 80008b0:	2110      	movs	r1, #16
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b08b      	sub	sp, #44	; 0x2c
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	2414      	movs	r4, #20
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2314      	movs	r3, #20
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f002 f96e 	bl	8002bbc <memset>
  if(hcan->Instance==CAN)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_CAN_MspInit+0x94>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d133      	bne.n	8000952 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008ec:	69da      	ldr	r2, [r3, #28]
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0489      	lsls	r1, r1, #18
 80008f4:	430a      	orrs	r2, r1
 80008f6:	61da      	str	r2, [r3, #28]
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008fa:	69da      	ldr	r2, [r3, #28]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	049b      	lsls	r3, r3, #18
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_CAN_MspInit+0x98>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_CAN_MspInit+0x98>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0289      	lsls	r1, r1, #10
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_CAN_MspInit+0x98>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	029b      	lsls	r3, r3, #10
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	22c0      	movs	r2, #192	; 0xc0
 8000926:	0152      	lsls	r2, r2, #5
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2202      	movs	r2, #2
 8000930:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2203      	movs	r2, #3
 800093c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2204      	movs	r2, #4
 8000942:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	187a      	adds	r2, r7, r1
 8000946:	2390      	movs	r3, #144	; 0x90
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fea9 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b00b      	add	sp, #44	; 0x2c
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40006400 	.word	0x40006400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08b      	sub	sp, #44	; 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	2414      	movs	r4, #20
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 f920 	bl	8002bbc <memset>
  if(hspi->Instance==SPI1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <HAL_SPI_MspInit+0x90>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d132      	bne.n	80009ec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0149      	lsls	r1, r1, #5
 8000990:	430a      	orrs	r2, r1
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	015b      	lsls	r3, r3, #5
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0289      	lsls	r1, r1, #10
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_SPI_MspInit+0x94>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009be:	0021      	movs	r1, r4
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	22e0      	movs	r2, #224	; 0xe0
 80009c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2202      	movs	r2, #2
 80009ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2203      	movs	r2, #3
 80009d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	187a      	adds	r2, r7, r1
 80009e0:	2390      	movs	r3, #144	; 0x90
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fe5c 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b00b      	add	sp, #44	; 0x2c
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f892 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a3a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a3c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <LoopForever+0xa>)
    CMP R1, R2
 8000a40:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a42:	d105      	bne.n	8000a50 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a46:	4913      	ldr	r1, [pc, #76]	; (8000a94 <LoopForever+0x12>)
    STR R1, [R0]
 8000a48:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a4c:	4913      	ldr	r1, [pc, #76]	; (8000a9c <LoopForever+0x1a>)
    STR R1, [R0]
 8000a4e:	6001      	str	r1, [r0, #0]

08000a50 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a52:	4914      	ldr	r1, [pc, #80]	; (8000aa4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <LoopForever+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a68:	4c11      	ldr	r4, [pc, #68]	; (8000ab0 <LoopForever+0x2e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a76:	f7ff ffd8 	bl	8000a2a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f002 f87b 	bl	8002b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fbcf 	bl	8000220 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a88:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a8c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a90:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a94:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a98:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a9c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aa8:	08002c1c 	.word	0x08002c1c
  ldr r2, =_sbss
 8000aac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ab0:	20000108 	.word	0x20000108

08000ab4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_Init+0x24>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_Init+0x24>)
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f809 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ace:	f7ff fecf 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x5c>)
 8000aea:	681c      	ldr	r4, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x60>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	0019      	movs	r1, r3
 8000af2:	23fa      	movs	r3, #250	; 0xfa
 8000af4:	0098      	lsls	r0, r3, #2
 8000af6:	f7ff fb07 	bl	8000108 <__udivsi3>
 8000afa:	0003      	movs	r3, r0
 8000afc:	0019      	movs	r1, r3
 8000afe:	0020      	movs	r0, r4
 8000b00:	f7ff fb02 	bl	8000108 <__udivsi3>
 8000b04:	0003      	movs	r3, r0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fdbf 	bl	800168a <HAL_SYSTICK_Config>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e00f      	b.n	8000b34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d80b      	bhi.n	8000b32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fd9c 	bl	8001660 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_InitTick+0x64>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000010 	.word	0x20000010
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	18d2      	adds	r2, r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000010 	.word	0x20000010
 8000b68:	20000104 	.word	0x20000104

08000b6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000104 	.word	0x20000104

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff0 	bl	8000b6c <HAL_GetTick>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	f7ff ffe0 	bl	8000b6c <HAL_GetTick>
 8000bac:	0002      	movs	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000010 	.word	0x20000010

08000bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0f0      	b.n	8000dbc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	5c9b      	ldrb	r3, [r3, r2]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fe6d 	bl	80008c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfe:	f7ff ffb5 	bl	8000b6c <HAL_GetTick>
 8000c02:	0003      	movs	r3, r0
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c06:	e013      	b.n	8000c30 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c08:	f7ff ffb0 	bl	8000b6c <HAL_GetTick>
 8000c0c:	0002      	movs	r2, r0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d90c      	bls.n	8000c30 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	0292      	lsls	r2, r2, #10
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2220      	movs	r2, #32
 8000c28:	2105      	movs	r1, #5
 8000c2a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e0c5      	b.n	8000dbc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d0e5      	beq.n	8000c08 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2102      	movs	r1, #2
 8000c48:	438a      	bics	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c4c:	f7ff ff8e 	bl	8000b6c <HAL_GetTick>
 8000c50:	0003      	movs	r3, r0
 8000c52:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c54:	e013      	b.n	8000c7e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c56:	f7ff ff89 	bl	8000b6c <HAL_GetTick>
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b0a      	cmp	r3, #10
 8000c62:	d90c      	bls.n	8000c7e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0292      	lsls	r2, r2, #10
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2220      	movs	r2, #32
 8000c76:	2105      	movs	r1, #5
 8000c78:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e09e      	b.n	8000dbc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2202      	movs	r2, #2
 8000c86:	4013      	ands	r3, r2
 8000c88:	d1e5      	bne.n	8000c56 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7e1b      	ldrb	r3, [r3, #24]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d108      	bne.n	8000ca4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7e5b      	ldrb	r3, [r3, #25]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d108      	bne.n	8000cce <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e007      	b.n	8000cde <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e9b      	ldrb	r3, [r3, #26]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d108      	bne.n	8000cf8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e007      	b.n	8000d08 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2120      	movs	r1, #32
 8000d04:	438a      	bics	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7edb      	ldrb	r3, [r3, #27]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e007      	b.n	8000d32 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7f1b      	ldrb	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2108      	movs	r1, #8
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2108      	movs	r1, #8
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7f5b      	ldrb	r3, [r3, #29]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2104      	movs	r1, #4
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2104      	movs	r1, #4
 8000d82:	438a      	bics	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	1e5a      	subs	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2220      	movs	r2, #32
 8000db6:	2101      	movs	r1, #1
 8000db8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b004      	add	sp, #16
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd4:	2013      	movs	r0, #19
 8000dd6:	183b      	adds	r3, r7, r0
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	2120      	movs	r1, #32
 8000ddc:	5c52      	ldrb	r2, [r2, r1]
 8000dde:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000de0:	0002      	movs	r2, r0
 8000de2:	18bb      	adds	r3, r7, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d004      	beq.n	8000df4 <HAL_CAN_ConfigFilter+0x30>
 8000dea:	18bb      	adds	r3, r7, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d000      	beq.n	8000df4 <HAL_CAN_ConfigFilter+0x30>
 8000df2:	e0cd      	b.n	8000f90 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	58d3      	ldr	r3, [r2, r3]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	0011      	movs	r1, r2
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	221f      	movs	r2, #31
 8000e10:	4013      	ands	r3, r2
 8000e12:	2201      	movs	r2, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	2387      	movs	r3, #135	; 0x87
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	58d3      	ldr	r3, [r2, r3]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	401a      	ands	r2, r3
 8000e28:	0011      	movs	r1, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	2387      	movs	r3, #135	; 0x87
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d129      	bne.n	8000e8e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	2383      	movs	r3, #131	; 0x83
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	58d3      	ldr	r3, [r2, r3]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	43d2      	mvns	r2, r2
 8000e46:	401a      	ands	r2, r3
 8000e48:	0011      	movs	r1, r2
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	2383      	movs	r3, #131	; 0x83
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	041b      	lsls	r3, r3, #16
 8000e5e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e64:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3248      	adds	r2, #72	; 0x48
 8000e6a:	00d2      	lsls	r2, r2, #3
 8000e6c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e82:	6979      	ldr	r1, [r7, #20]
 8000e84:	3348      	adds	r3, #72	; 0x48
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	18cb      	adds	r3, r1, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d128      	bne.n	8000ee8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	2383      	movs	r3, #131	; 0x83
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	58d2      	ldr	r2, [r2, r3]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	2383      	movs	r3, #131	; 0x83
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	041b      	lsls	r3, r3, #16
 8000eb8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ebe:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3248      	adds	r2, #72	; 0x48
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000edc:	6979      	ldr	r1, [r7, #20]
 8000ede:	3348      	adds	r3, #72	; 0x48
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	18cb      	adds	r3, r1, r3
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10c      	bne.n	8000f0a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	2381      	movs	r3, #129	; 0x81
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	58d3      	ldr	r3, [r2, r3]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	43d2      	mvns	r2, r2
 8000efc:	401a      	ands	r2, r3
 8000efe:	0011      	movs	r1, r2
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	2381      	movs	r3, #129	; 0x81
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	50d1      	str	r1, [r2, r3]
 8000f08:	e00a      	b.n	8000f20 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	2381      	movs	r3, #129	; 0x81
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	58d2      	ldr	r2, [r2, r3]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	0011      	movs	r1, r2
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	2381      	movs	r3, #129	; 0x81
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10c      	bne.n	8000f42 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	2385      	movs	r3, #133	; 0x85
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	58d3      	ldr	r3, [r2, r3]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	43d2      	mvns	r2, r2
 8000f34:	401a      	ands	r2, r3
 8000f36:	0011      	movs	r1, r2
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	2385      	movs	r3, #133	; 0x85
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	50d1      	str	r1, [r2, r3]
 8000f40:	e00a      	b.n	8000f58 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	2385      	movs	r3, #133	; 0x85
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	58d2      	ldr	r2, [r2, r3]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	0011      	movs	r1, r2
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	2385      	movs	r3, #133	; 0x85
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10a      	bne.n	8000f76 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	2387      	movs	r3, #135	; 0x87
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	58d2      	ldr	r2, [r2, r3]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	2387      	movs	r3, #135	; 0x87
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4393      	bics	r3, r2
 8000f82:	0019      	movs	r1, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	02d2      	lsls	r2, r2, #11
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b006      	add	sp, #24
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d12f      	bne.n	800101c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fd4:	f7ff fdca 	bl	8000b6c <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fdc:	e013      	b.n	8001006 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fde:	f7ff fdc5 	bl	8000b6c <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b0a      	cmp	r3, #10
 8000fea:	d90c      	bls.n	8001006 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0292      	lsls	r2, r2, #10
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2105      	movs	r1, #5
 8001000:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e012      	b.n	800102c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	4013      	ands	r3, r2
 8001010:	d1e5      	bne.n	8000fde <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	e007      	b.n	800102c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0312      	lsls	r2, r2, #12
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
  }
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001042:	201f      	movs	r0, #31
 8001044:	183b      	adds	r3, r7, r0
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	2120      	movs	r1, #32
 800104a:	5c52      	ldrb	r2, [r2, r1]
 800104c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001056:	183b      	adds	r3, r7, r0
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d004      	beq.n	8001068 <HAL_CAN_AddTxMessage+0x34>
 800105e:	183b      	adds	r3, r7, r0
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d000      	beq.n	8001068 <HAL_CAN_AddTxMessage+0x34>
 8001066:	e0b7      	b.n	80011d8 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	04db      	lsls	r3, r3, #19
 800106e:	4013      	ands	r3, r2
 8001070:	d10a      	bne.n	8001088 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	051b      	lsls	r3, r3, #20
 8001078:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800107a:	d105      	bne.n	8001088 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	055b      	lsls	r3, r3, #21
 8001082:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001084:	d100      	bne.n	8001088 <HAL_CAN_AddTxMessage+0x54>
 8001086:	e09e      	b.n	80011c6 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	0e1b      	lsrs	r3, r3, #24
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d908      	bls.n	80010aa <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0412      	lsls	r2, r2, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e09e      	b.n	80011e8 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10c      	bne.n	80010d6 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4311      	orrs	r1, r2
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	3218      	adds	r2, #24
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	50d1      	str	r1, [r2, r3]
 80010d4:	e00f      	b.n	80010f6 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e0:	431a      	orrs	r2, r3
 80010e2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80010ec:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	3218      	adds	r2, #24
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3318      	adds	r3, #24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	18cb      	adds	r3, r1, r3
 8001106:	3304      	adds	r3, #4
 8001108:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	7d1b      	ldrb	r3, [r3, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d112      	bne.n	8001138 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3318      	adds	r3, #24
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	3304      	adds	r3, #4
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	431a      	orrs	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3318      	adds	r3, #24
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	18cb      	adds	r3, r1, r3
 8001134:	3304      	adds	r3, #4
 8001136:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3307      	adds	r3, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	061a      	lsls	r2, r3, #24
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3306      	adds	r3, #6
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3305      	adds	r3, #5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3304      	adds	r3, #4
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0019      	movs	r1, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	6979      	ldr	r1, [r7, #20]
 8001164:	23c6      	movs	r3, #198	; 0xc6
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	0109      	lsls	r1, r1, #4
 800116a:	1841      	adds	r1, r0, r1
 800116c:	18cb      	adds	r3, r1, r3
 800116e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3303      	adds	r3, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	061a      	lsls	r2, r3, #24
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	0019      	movs	r1, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	6979      	ldr	r1, [r7, #20]
 800119a:	23c4      	movs	r3, #196	; 0xc4
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	0109      	lsls	r1, r1, #4
 80011a0:	1841      	adds	r1, r0, r1
 80011a2:	18cb      	adds	r3, r1, r3
 80011a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	3218      	adds	r2, #24
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	58d2      	ldr	r2, [r2, r3]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2101      	movs	r1, #1
 80011b8:	4311      	orrs	r1, r2
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	3218      	adds	r2, #24
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e010      	b.n	80011e8 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	0392      	lsls	r2, r2, #14
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	02d2      	lsls	r2, r2, #11
 80011e0:	431a      	orrs	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
  }
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b008      	add	sp, #32
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011fc:	200b      	movs	r0, #11
 80011fe:	183b      	adds	r3, r7, r0
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	2120      	movs	r1, #32
 8001204:	5c52      	ldrb	r2, [r2, r1]
 8001206:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001208:	0002      	movs	r2, r0
 800120a:	18bb      	adds	r3, r7, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d003      	beq.n	800121a <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8001212:	18bb      	adds	r3, r7, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d11d      	bne.n	8001256 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	04db      	lsls	r3, r3, #19
 8001224:	4013      	ands	r3, r2
 8001226:	d002      	beq.n	800122e <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	051b      	lsls	r3, r3, #20
 8001238:	4013      	ands	r3, r2
 800123a:	d002      	beq.n	8001242 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	055b      	lsls	r3, r3, #21
 800124c:	4013      	ands	r3, r2
 800124e:	d002      	beq.n	8001256 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126e:	200b      	movs	r0, #11
 8001270:	183b      	adds	r3, r7, r0
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	2120      	movs	r1, #32
 8001276:	5c52      	ldrb	r2, [r2, r1]
 8001278:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800127a:	0002      	movs	r2, r0
 800127c:	18bb      	adds	r3, r7, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d003      	beq.n	800128c <HAL_CAN_IsTxMessagePending+0x2c>
 8001284:	18bb      	adds	r3, r7, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d10b      	bne.n	80012a4 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	0692      	lsls	r2, r2, #26
 8001296:	401a      	ands	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	069b      	lsls	r3, r3, #26
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b004      	add	sp, #16
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012bc:	2017      	movs	r0, #23
 80012be:	183b      	adds	r3, r7, r0
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	2120      	movs	r1, #32
 80012c4:	5c52      	ldrb	r2, [r2, r1]
 80012c6:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c8:	0002      	movs	r2, r0
 80012ca:	18bb      	adds	r3, r7, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d004      	beq.n	80012dc <HAL_CAN_GetRxMessage+0x2e>
 80012d2:	18bb      	adds	r3, r7, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d000      	beq.n	80012dc <HAL_CAN_GetRxMessage+0x2e>
 80012da:	e0f8      	b.n	80014ce <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10e      	bne.n	8001300 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	d117      	bne.n	800131e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0392      	lsls	r2, r2, #14
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0ee      	b.n	80014de <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2203      	movs	r2, #3
 8001308:	4013      	ands	r3, r2
 800130a:	d108      	bne.n	800131e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0392      	lsls	r2, r2, #14
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0df      	b.n	80014de <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	321b      	adds	r2, #27
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	58d3      	ldr	r3, [r2, r3]
 800132a:	2204      	movs	r2, #4
 800132c:	401a      	ands	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10b      	bne.n	8001352 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	321b      	adds	r2, #27
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	58d3      	ldr	r3, [r2, r3]
 8001346:	0d5b      	lsrs	r3, r3, #21
 8001348:	055b      	lsls	r3, r3, #21
 800134a:	0d5a      	lsrs	r2, r3, #21
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e00a      	b.n	8001368 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	321b      	adds	r2, #27
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	58d3      	ldr	r3, [r2, r3]
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	321b      	adds	r2, #27
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	58d3      	ldr	r3, [r2, r3]
 8001374:	2202      	movs	r2, #2
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	331b      	adds	r3, #27
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	3304      	adds	r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	220f      	movs	r2, #15
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	18d3      	adds	r3, r2, r3
 80013a0:	3304      	adds	r3, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	331b      	adds	r3, #27
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	0c1a      	lsrs	r2, r3, #16
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	23dc      	movs	r3, #220	; 0xdc
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	188a      	adds	r2, r1, r2
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	23dc      	movs	r3, #220	; 0xdc
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	188a      	adds	r2, r1, r2
 80013ee:	18d3      	adds	r3, r2, r3
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0a1a      	lsrs	r2, r3, #8
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	23dc      	movs	r3, #220	; 0xdc
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	188a      	adds	r2, r1, r2
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0c1a      	lsrs	r2, r3, #16
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3302      	adds	r3, #2
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	23dc      	movs	r3, #220	; 0xdc
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	188a      	adds	r2, r1, r2
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0e1a      	lsrs	r2, r3, #24
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3303      	adds	r3, #3
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	23de      	movs	r3, #222	; 0xde
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	188a      	adds	r2, r1, r2
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3304      	adds	r3, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	23de      	movs	r3, #222	; 0xde
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	188a      	adds	r2, r1, r2
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0a1a      	lsrs	r2, r3, #8
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3305      	adds	r3, #5
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	23de      	movs	r3, #222	; 0xde
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	188a      	adds	r2, r1, r2
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0c1a      	lsrs	r2, r3, #16
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3306      	adds	r3, #6
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	23de      	movs	r3, #222	; 0xde
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	188a      	adds	r2, r1, r2
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0e1a      	lsrs	r2, r3, #24
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3307      	adds	r3, #7
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2120      	movs	r1, #32
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e007      	b.n	80014ca <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2120      	movs	r1, #32
 80014c6:	430a      	orrs	r2, r1
 80014c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e007      	b.n	80014de <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	02d2      	lsls	r2, r2, #11
 80014d6:	431a      	orrs	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b006      	add	sp, #24
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f4:	200b      	movs	r0, #11
 80014f6:	183b      	adds	r3, r7, r0
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	2120      	movs	r1, #32
 80014fc:	5c52      	ldrb	r2, [r2, r1]
 80014fe:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001500:	0002      	movs	r2, r0
 8001502:	18bb      	adds	r3, r7, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d003      	beq.n	8001512 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 800150a:	18bb      	adds	r3, r7, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d10f      	bne.n	8001532 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e005      	b.n	8001532 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b7f      	cmp	r3, #127	; 0x7f
 8001550:	d828      	bhi.n	80015a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <__NVIC_SetPriority+0xd4>)
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	33c0      	adds	r3, #192	; 0xc0
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	589b      	ldr	r3, [r3, r2]
 8001562:	1dfa      	adds	r2, r7, #7
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	0011      	movs	r1, r2
 8001568:	2203      	movs	r2, #3
 800156a:	400a      	ands	r2, r1
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	21ff      	movs	r1, #255	; 0xff
 8001570:	4091      	lsls	r1, r2
 8001572:	000a      	movs	r2, r1
 8001574:	43d2      	mvns	r2, r2
 8001576:	401a      	ands	r2, r3
 8001578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	401a      	ands	r2, r3
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	0018      	movs	r0, r3
 8001588:	2303      	movs	r3, #3
 800158a:	4003      	ands	r3, r0
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <__NVIC_SetPriority+0xd4>)
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	430a      	orrs	r2, r1
 800159c:	33c0      	adds	r3, #192	; 0xc0
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015a2:	e031      	b.n	8001608 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <__NVIC_SetPriority+0xd8>)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0019      	movs	r1, r3
 80015ac:	230f      	movs	r3, #15
 80015ae:	400b      	ands	r3, r1
 80015b0:	3b08      	subs	r3, #8
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3306      	adds	r3, #6
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	3304      	adds	r3, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1dfa      	adds	r2, r7, #7
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	0011      	movs	r1, r2
 80015c4:	2203      	movs	r2, #3
 80015c6:	400a      	ands	r2, r1
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	21ff      	movs	r1, #255	; 0xff
 80015cc:	4091      	lsls	r1, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	401a      	ands	r2, r3
 80015d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	401a      	ands	r2, r3
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	0018      	movs	r0, r3
 80015e4:	2303      	movs	r3, #3
 80015e6:	4003      	ands	r3, r0
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <__NVIC_SetPriority+0xd8>)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	001c      	movs	r4, r3
 80015f4:	230f      	movs	r3, #15
 80015f6:	4023      	ands	r3, r4
 80015f8:	3b08      	subs	r3, #8
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	430a      	orrs	r2, r1
 80015fe:	3306      	adds	r3, #6
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	18c3      	adds	r3, r0, r3
 8001604:	3304      	adds	r3, #4
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b003      	add	sp, #12
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	045b      	lsls	r3, r3, #17
 8001628:	429a      	cmp	r2, r3
 800162a:	d301      	bcc.n	8001630 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162c:	2301      	movs	r3, #1
 800162e:	e010      	b.n	8001652 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <SysTick_Config+0x44>)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	3a01      	subs	r2, #1
 8001636:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001638:	2301      	movs	r3, #1
 800163a:	425b      	negs	r3, r3
 800163c:	2103      	movs	r1, #3
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff ff7c 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x44>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x44>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	210f      	movs	r1, #15
 800166c:	187b      	adds	r3, r7, r1
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	187b      	adds	r3, r7, r1
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	0011      	movs	r1, r2
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff ffbf 	bl	8001618 <SysTick_Config>
 800169a:	0003      	movs	r3, r0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e149      	b.n	8001948 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <HAL_GPIO_Init+0x28>
 80016ca:	e13a      	b.n	8001942 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	409a      	lsls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	2201      	movs	r2, #1
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	4013      	ands	r3, r2
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	4013      	ands	r3, r2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	58d3      	ldr	r3, [r2, r3]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	43da      	mvns	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2107      	movs	r1, #7
 80017ba:	400b      	ands	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	6939      	ldr	r1, [r7, #16]
 80017d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	029b      	lsls	r3, r3, #10
 8001812:	4013      	ands	r3, r2
 8001814:	d100      	bne.n	8001818 <HAL_GPIO_Init+0x174>
 8001816:	e094      	b.n	8001942 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 800181e:	2101      	movs	r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	619a      	str	r2, [r3, #24]
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	589b      	ldr	r3, [r3, r2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2203      	movs	r2, #3
 8001842:	4013      	ands	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	409a      	lsls	r2, r3
 800184a:	0013      	movs	r3, r2
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	2390      	movs	r3, #144	; 0x90
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	429a      	cmp	r2, r3
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x1d6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a41      	ldr	r2, [pc, #260]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x1d2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a40      	ldr	r2, [pc, #256]	; (800196c <HAL_GPIO_Init+0x2c8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x1ce>
 800186e:	2302      	movs	r3, #2
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x1d8>
 8001872:	2305      	movs	r3, #5
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x1d8>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x1d8>
 800187a:	2300      	movs	r3, #0
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	2103      	movs	r1, #3
 8001880:	400a      	ands	r2, r1
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	4013      	ands	r3, r2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43da      	mvns	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	035b      	lsls	r3, r3, #13
 8001906:	4013      	ands	r3, r2
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43da      	mvns	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	039b      	lsls	r3, r3, #14
 8001930:	4013      	ands	r3, r2
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	40da      	lsrs	r2, r3
 8001950:	1e13      	subs	r3, r2, #0
 8001952:	d000      	beq.n	8001956 <HAL_GPIO_Init+0x2b2>
 8001954:	e6ae      	b.n	80016b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b006      	add	sp, #24
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	0008      	movs	r0, r1
 800197e:	0011      	movs	r1, r2
 8001980:	1cbb      	adds	r3, r7, #2
 8001982:	1c02      	adds	r2, r0, #0
 8001984:	801a      	strh	r2, [r3, #0]
 8001986:	1c7b      	adds	r3, r7, #1
 8001988:	1c0a      	adds	r2, r1, #0
 800198a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	1c7b      	adds	r3, r7, #1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001994:	1cbb      	adds	r3, r7, #2
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199e:	1cbb      	adds	r3, r7, #2
 80019a0:	881a      	ldrh	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f000 fb76 	bl	80020b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d100      	bne.n	80019d0 <HAL_RCC_OscConfig+0x20>
 80019ce:	e08e      	b.n	8001aee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d0:	4bc5      	ldr	r3, [pc, #788]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	220c      	movs	r2, #12
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00e      	beq.n	80019fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019dc:	4bc2      	ldr	r3, [pc, #776]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d117      	bne.n	8001a18 <HAL_RCC_OscConfig+0x68>
 80019e8:	4bbf      	ldr	r3, [pc, #764]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	23c0      	movs	r3, #192	; 0xc0
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	401a      	ands	r2, r3
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d10e      	bne.n	8001a18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4bbb      	ldr	r3, [pc, #748]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_RCC_OscConfig+0x58>
 8001a06:	e071      	b.n	8001aec <HAL_RCC_OscConfig+0x13c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d000      	beq.n	8001a12 <HAL_RCC_OscConfig+0x62>
 8001a10:	e06c      	b.n	8001aec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f000 fb4c 	bl	80020b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80>
 8001a20:	4bb1      	ldr	r3, [pc, #708]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4bb0      	ldr	r3, [pc, #704]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0249      	lsls	r1, r1, #9
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e02f      	b.n	8001a90 <HAL_RCC_OscConfig+0xe0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0xa2>
 8001a38:	4bab      	ldr	r3, [pc, #684]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4baa      	ldr	r3, [pc, #680]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a3e:	49ab      	ldr	r1, [pc, #684]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4ba8      	ldr	r3, [pc, #672]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4ba7      	ldr	r3, [pc, #668]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	49a9      	ldr	r1, [pc, #676]	; (8001cf0 <HAL_RCC_OscConfig+0x340>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e01e      	b.n	8001a90 <HAL_RCC_OscConfig+0xe0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10e      	bne.n	8001a78 <HAL_RCC_OscConfig+0xc8>
 8001a5a:	4ba3      	ldr	r3, [pc, #652]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4ba2      	ldr	r3, [pc, #648]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	02c9      	lsls	r1, r1, #11
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	4b9f      	ldr	r3, [pc, #636]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0249      	lsls	r1, r1, #9
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xe0>
 8001a78:	4b9b      	ldr	r3, [pc, #620]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	499b      	ldr	r1, [pc, #620]	; (8001cec <HAL_RCC_OscConfig+0x33c>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	4b98      	ldr	r3, [pc, #608]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b97      	ldr	r3, [pc, #604]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	4999      	ldr	r1, [pc, #612]	; (8001cf0 <HAL_RCC_OscConfig+0x340>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d014      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f868 	bl	8000b6c <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff f863 	bl	8000b6c <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e2fd      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xf2>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f853 	bl	8000b6c <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f84e 	bl	8000b6c <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e2e8      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x11c>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_OscConfig+0x14a>
 8001af8:	e06c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001afa:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	220c      	movs	r2, #12
 8001b00:	4013      	ands	r3, r2
 8001b02:	d00e      	beq.n	8001b22 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b04:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	220c      	movs	r2, #12
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d11f      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1a0>
 8001b10:	4b75      	ldr	r3, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	401a      	ands	r2, r3
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x188>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e2bb      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	22f8      	movs	r2, #248	; 0xf8
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00da      	lsls	r2, r3, #3
 8001b48:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e041      	b.n	8001bd4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f802 	bl	8000b6c <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fffd 	bl	8000b6c <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e297      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f1      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	22f8      	movs	r2, #248	; 0xf8
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00da      	lsls	r2, r3, #3
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	438a      	bics	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7fe ffdd 	bl	8000b6c <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7fe ffd8 	bl	8000b6c <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e272      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d1f1      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d036      	beq.n	8001c4c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe ffbb 	bl	8000b6c <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7fe ffb6 	bl	8000b6c <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e250      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f1      	beq.n	8001bfc <HAL_RCC_OscConfig+0x24c>
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	438a      	bics	r2, r1
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe ffa1 	bl	8000b6c <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c30:	f7fe ff9c 	bl	8000b6c <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e236      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d1f1      	bne.n	8001c30 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	d100      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2a8>
 8001c56:	e0b5      	b.n	8001dc4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c58:	201f      	movs	r0, #31
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	055b      	lsls	r3, r3, #21
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d110      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	0549      	lsls	r1, r1, #21
 8001c76:	430a      	orrs	r2, r1
 8001c78:	61da      	str	r2, [r3, #28]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	055b      	lsls	r3, r3, #21
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d11a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0049      	lsls	r1, r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7fe ff60 	bl	8000b6c <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7fe ff5b 	bl	8000b6c <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1f5      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x344>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x348>
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_RCC_OscConfig+0x338>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	621a      	str	r2, [r3, #32]
 8001ce4:	e036      	b.n	8001d54 <HAL_RCC_OscConfig+0x3a4>
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffeffff 	.word	0xfffeffff
 8001cf0:	fffbffff 	.word	0xfffbffff
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x36a>
 8001d00:	4bca      	ldr	r3, [pc, #808]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	4bc9      	ldr	r3, [pc, #804]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4bc7      	ldr	r3, [pc, #796]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4bc6      	ldr	r3, [pc, #792]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x3a4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x38c>
 8001d22:	4bc2      	ldr	r3, [pc, #776]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	4bc1      	ldr	r3, [pc, #772]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d28:	2104      	movs	r1, #4
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	621a      	str	r2, [r3, #32]
 8001d2e:	4bbf      	ldr	r3, [pc, #764]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4bbe      	ldr	r3, [pc, #760]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	621a      	str	r2, [r3, #32]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x3a4>
 8001d3c:	4bbb      	ldr	r3, [pc, #748]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4bba      	ldr	r3, [pc, #744]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	438a      	bics	r2, r1
 8001d46:	621a      	str	r2, [r3, #32]
 8001d48:	4bb8      	ldr	r3, [pc, #736]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4bb7      	ldr	r3, [pc, #732]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	438a      	bics	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe ff06 	bl	8000b6c <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7fe ff01 	bl	8000b6c <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4aaf      	ldr	r2, [pc, #700]	; (8002030 <HAL_RCC_OscConfig+0x680>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e19a      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4bac      	ldr	r3, [pc, #688]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3b6>
 8001d84:	e013      	b.n	8001dae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe fef1 	bl	8000b6c <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe feec 	bl	8000b6c <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4aa5      	ldr	r2, [pc, #660]	; (8002030 <HAL_RCC_OscConfig+0x680>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e185      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4ba1      	ldr	r3, [pc, #644]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dae:	231f      	movs	r3, #31
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b9c      	ldr	r3, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	4b9b      	ldr	r3, [pc, #620]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	499d      	ldr	r1, [pc, #628]	; (8002034 <HAL_RCC_OscConfig+0x684>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d12a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dd6:	4b95      	ldr	r3, [pc, #596]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001ddc:	2104      	movs	r1, #4
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001de2:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de6:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe febd 	bl	8000b6c <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df8:	f7fe feb8 	bl	8000b6c <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e152      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f1      	beq.n	8001df8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e14:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	22f8      	movs	r2, #248	; 0xf8
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2a:	e034      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	3305      	adds	r3, #5
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e34:	4b7d      	ldr	r3, [pc, #500]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e38:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e40:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	22f8      	movs	r2, #248	; 0xf8
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	00da      	lsls	r2, r3, #3
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e58:	4b74      	ldr	r3, [pc, #464]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5c:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	2104      	movs	r1, #4
 8001e60:	430a      	orrs	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e64:	4b71      	ldr	r3, [pc, #452]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7fe fe7c 	bl	8000b6c <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7a:	f7fe fe77 	bl	8000b6c <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e111      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f1      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d05c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ea0:	4b62      	ldr	r3, [pc, #392]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d00e      	beq.n	8001eca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001eac:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d114      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001eb8:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d040      	beq.n	8001f58 <HAL_RCC_OscConfig+0x5a8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d03c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e6      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe38 	bl	8000b6c <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f02:	f7fe fe33 	bl	8000b6c <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0cd      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f14:	4b45      	ldr	r3, [pc, #276]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x552>
 8001f20:	e01b      	b.n	8001f5a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f22:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f28:	4943      	ldr	r1, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x688>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fe1d 	bl	8000b6c <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f38:	f7fe fe18 	bl	8000b6c <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0b2      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x588>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f58:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5b4>
 8001f62:	e0a4      	b.n	80020ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	220c      	movs	r2, #12
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d100      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5c2>
 8001f70:	e078      	b.n	8002064 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d14c      	bne.n	8002014 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001f80:	492e      	ldr	r1, [pc, #184]	; (800203c <HAL_RCC_OscConfig+0x68c>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fdf1 	bl	8000b6c <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fdec 	bl	8000b6c <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e086      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	049b      	lsls	r3, r3, #18
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_RCC_OscConfig+0x690>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0449      	lsls	r1, r1, #17
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fdbf 	bl	8000b6c <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fdba 	bl	8000b6c <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e054      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	4013      	ands	r3, r2
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x644>
 8002012:	e04c      	b.n	80020ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_RCC_OscConfig+0x67c>)
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <HAL_RCC_OscConfig+0x68c>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fda4 	bl	8000b6c <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x6a6>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	00001388 	.word	0x00001388
 8002034:	efffffff 	.word	0xefffffff
 8002038:	fffeffff 	.word	0xfffeffff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe fd92 	bl	8000b6c <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e02c      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_RCC_OscConfig+0x708>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	049b      	lsls	r3, r3, #18
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x694>
 8002062:	e024      	b.n	80020ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e01f      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x708>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_RCC_OscConfig+0x708>)
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	429a      	cmp	r2, r3
 800208a:	d10e      	bne.n	80020aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	220f      	movs	r2, #15
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	23f0      	movs	r3, #240	; 0xf0
 800209e:	039b      	lsls	r3, r3, #14
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b008      	add	sp, #32
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0bf      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d911      	bls.n	8002102 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4393      	bics	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0a6      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d015      	beq.n	8002138 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2204      	movs	r2, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d006      	beq.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800211c:	21e0      	movs	r1, #224	; 0xe0
 800211e:	00c9      	lsls	r1, r1, #3
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	22f0      	movs	r2, #240	; 0xf0
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	d04c      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	029b      	lsls	r3, r3, #10
 8002152:	4013      	ands	r3, r2
 8002154:	d120      	bne.n	8002198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07a      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	049b      	lsls	r3, r3, #18
 800216a:	4013      	ands	r3, r2
 800216c:	d114      	bne.n	8002198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06e      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	4013      	ands	r3, r2
 8002184:	d108      	bne.n	8002198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e062      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e05b      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	4393      	bics	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fcde 	bl	8000b6c <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b4:	e009      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7fe fcd9 	bl	8000b6c <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1a4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e042      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	220c      	movs	r2, #12
 80021d0:	401a      	ands	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1ec      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d211      	bcs.n	800220e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x19c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e020      	b.n	8002250 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_RCC_ClockConfig+0x1a8>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800222c:	f000 f820 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 8002230:	0001      	movs	r1, r0
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1a0>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	220f      	movs	r2, #15
 800223a:	4013      	ands	r3, r2
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1ac>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	000a      	movs	r2, r1
 8002242:	40da      	lsrs	r2, r3
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 8002246:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002248:	2003      	movs	r0, #3
 800224a:	f7fe fc49 	bl	8000ae0 <HAL_InitTick>
  
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	00001388 	.word	0x00001388
 8002264:	fffff8ff 	.word	0xfffff8ff
 8002268:	08002c04 	.word	0x08002c04
 800226c:	20000008 	.word	0x20000008

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b08f      	sub	sp, #60	; 0x3c
 8002274:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002276:	2314      	movs	r3, #20
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_RCC_GetSysClockFreq+0xec>)
 800227c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800227e:	c313      	stmia	r3!, {r0, r1, r4}
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4a36      	ldr	r2, [pc, #216]	; (8002360 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800228a:	c313      	stmia	r3!, {r0, r1, r4}
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	220c      	movs	r2, #12
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d047      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xd4>
 80022b4:	d849      	bhi.n	800234a <HAL_RCC_GetSysClockFreq+0xda>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x50>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x56>
 80022be:	e044      	b.n	800234a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022c4:	e044      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	220f      	movs	r2, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	2214      	movs	r2, #20
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	220f      	movs	r2, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	401a      	ands	r2, r3
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	025b      	lsls	r3, r3, #9
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f6:	481c      	ldr	r0, [pc, #112]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f8:	f7fd ff06 	bl	8000108 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	001a      	movs	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	4353      	muls	r3, r2
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e01a      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	401a      	ands	r2, r3
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	429a      	cmp	r2, r3
 8002316:	d109      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_RCC_GetSysClockFreq+0xfc>)
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	001a      	movs	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	4353      	muls	r3, r2
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
 800232a:	e008      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	4810      	ldr	r0, [pc, #64]	; (8002370 <HAL_RCC_GetSysClockFreq+0x100>)
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4353      	muls	r3, r2
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002342:	e005      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002348:	e002      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_GetSysClockFreq+0x100>)
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800234e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b00f      	add	sp, #60	; 0x3c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	08002be4 	.word	0x08002be4
 8002360:	08002bf4 	.word	0x08002bf4
 8002364:	40021000 	.word	0x40021000
 8002368:	00b71b00 	.word	0x00b71b00
 800236c:	02dc6c00 	.word	0x02dc6c00
 8002370:	007a1200 	.word	0x007a1200

08002374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0a8      	b.n	80024d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	2382      	movs	r3, #130	; 0x82
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	429a      	cmp	r2, r3
 8002398:	d009      	beq.n	80023ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	e005      	b.n	80023ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	225d      	movs	r2, #93	; 0x5d
 80023b8:	5c9b      	ldrb	r3, [r3, r2]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	225c      	movs	r2, #92	; 0x5c
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe faca 	bl	8000964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	225d      	movs	r2, #93	; 0x5d
 80023d4:	2102      	movs	r1, #2
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	23e0      	movs	r3, #224	; 0xe0
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d902      	bls.n	80023fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e002      	b.n	8002400 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	015b      	lsls	r3, r3, #5
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	23f0      	movs	r3, #240	; 0xf0
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	429a      	cmp	r2, r3
 800240a:	d008      	beq.n	800241e <HAL_SPI_Init+0xaa>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	23e0      	movs	r3, #224	; 0xe0
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	429a      	cmp	r2, r3
 8002416:	d002      	beq.n	800241e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	2382      	movs	r3, #130	; 0x82
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	401a      	ands	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	2384      	movs	r3, #132	; 0x84
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	400b      	ands	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2102      	movs	r1, #2
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2101      	movs	r1, #1
 8002444:	400b      	ands	r3, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6999      	ldr	r1, [r3, #24]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	400b      	ands	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2138      	movs	r1, #56	; 0x38
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	400b      	ands	r3, r1
 8002466:	431a      	orrs	r2, r3
 8002468:	0011      	movs	r1, r2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	2204      	movs	r2, #4
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2110      	movs	r1, #16
 800248c:	400b      	ands	r3, r1
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	2108      	movs	r1, #8
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	23f0      	movs	r3, #240	; 0xf0
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	400b      	ands	r3, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	0011      	movs	r1, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	401a      	ands	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4907      	ldr	r1, [pc, #28]	; (80024e0 <HAL_SPI_Init+0x16c>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	225d      	movs	r2, #93	; 0x5d
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	fffff7ff 	.word	0xfffff7ff

080024e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	001a      	movs	r2, r3
 80024f2:	1cbb      	adds	r3, r7, #2
 80024f4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024f6:	2301      	movs	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024fa:	2323      	movs	r3, #35	; 0x23
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	225c      	movs	r2, #92	; 0x5c
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x2c>
 800250c:	2302      	movs	r3, #2
 800250e:	e1b5      	b.n	800287c <HAL_SPI_TransmitReceive+0x398>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	225c      	movs	r2, #92	; 0x5c
 8002514:	2101      	movs	r1, #1
 8002516:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002518:	f7fe fb28 	bl	8000b6c <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002520:	201b      	movs	r0, #27
 8002522:	183b      	adds	r3, r7, r0
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	215d      	movs	r1, #93	; 0x5d
 8002528:	5c52      	ldrb	r2, [r2, r1]
 800252a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002532:	2312      	movs	r3, #18
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	1cba      	adds	r2, r7, #2
 8002538:	8812      	ldrh	r2, [r2, #0]
 800253a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800253c:	183b      	adds	r3, r7, r0
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d011      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x84>
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	2382      	movs	r3, #130	; 0x82
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	429a      	cmp	r2, r3
 800254c:	d107      	bne.n	800255e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_SPI_TransmitReceive+0x7a>
 8002556:	183b      	adds	r3, r7, r0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d004      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800255e:	2323      	movs	r3, #35	; 0x23
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
    goto error;
 8002566:	e17e      	b.n	8002866 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_SPI_TransmitReceive+0x98>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_SPI_TransmitReceive+0x98>
 8002574:	1cbb      	adds	r3, r7, #2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800257c:	2323      	movs	r3, #35	; 0x23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
    goto error;
 8002584:	e16f      	b.n	8002866 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	225d      	movs	r2, #93	; 0x5d
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b04      	cmp	r3, #4
 8002590:	d003      	beq.n	800259a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	225d      	movs	r2, #93	; 0x5d
 8002596:	2105      	movs	r1, #5
 8002598:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1cba      	adds	r2, r7, #2
 80025aa:	2146      	movs	r1, #70	; 0x46
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1cba      	adds	r2, r7, #2
 80025b4:	2144      	movs	r1, #68	; 0x44
 80025b6:	8812      	ldrh	r2, [r2, #0]
 80025b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1cba      	adds	r2, r7, #2
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1cba      	adds	r2, r7, #2
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	23e0      	movs	r3, #224	; 0xe0
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d908      	bls.n	80025fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	49a4      	ldr	r1, [pc, #656]	; (8002884 <HAL_SPI_TransmitReceive+0x3a0>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	e008      	b.n	800260c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0149      	lsls	r1, r1, #5
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	4013      	ands	r3, r2
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d007      	beq.n	800262a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2140      	movs	r1, #64	; 0x40
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	23e0      	movs	r3, #224	; 0xe0
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	429a      	cmp	r2, r3
 8002634:	d800      	bhi.n	8002638 <HAL_SPI_TransmitReceive+0x154>
 8002636:	e07f      	b.n	8002738 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_SPI_TransmitReceive+0x168>
 8002640:	2312      	movs	r3, #18
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d000      	beq.n	800264c <HAL_SPI_TransmitReceive+0x168>
 800264a:	e069      	b.n	8002720 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002670:	e056      	b.n	8002720 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11b      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x1d4>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x1d4>
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d113      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d11c      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x21c>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2246      	movs	r2, #70	; 0x46
 80026ca:	5a9b      	ldrh	r3, [r3, r2]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	b292      	uxth	r2, r2
 80026de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2246      	movs	r2, #70	; 0x46
 80026ee:	5a9b      	ldrh	r3, [r3, r2]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b299      	uxth	r1, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2246      	movs	r2, #70	; 0x46
 80026fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002700:	f7fe fa34 	bl	8000b6c <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270c:	429a      	cmp	r2, r3
 800270e:	d807      	bhi.n	8002720 <HAL_SPI_TransmitReceive+0x23c>
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	3301      	adds	r3, #1
 8002714:	d004      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002716:	2323      	movs	r3, #35	; 0x23
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2203      	movs	r2, #3
 800271c:	701a      	strb	r2, [r3, #0]
        goto error;
 800271e:	e0a2      	b.n	8002866 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1a3      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x18e>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2246      	movs	r2, #70	; 0x46
 800272e:	5a9b      	ldrh	r3, [r3, r2]
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19d      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x18e>
 8002736:	e085      	b.n	8002844 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_SPI_TransmitReceive+0x268>
 8002740:	2312      	movs	r3, #18
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d000      	beq.n	800274c <HAL_SPI_TransmitReceive+0x268>
 800274a:	e070      	b.n	800282e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002772:	e05c      	b.n	800282e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11c      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x2d8>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <HAL_SPI_TransmitReceive+0x2d8>
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	2b01      	cmp	r3, #1
 8002790:	d114      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d11e      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x324>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2246      	movs	r2, #70	; 0x46
 80027ce:	5a9b      	ldrh	r3, [r3, r2]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	001a      	movs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2246      	movs	r2, #70	; 0x46
 80027f6:	5a9b      	ldrh	r3, [r3, r2]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b299      	uxth	r1, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2246      	movs	r2, #70	; 0x46
 8002802:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002804:	2301      	movs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002808:	f7fe f9b0 	bl	8000b6c <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002814:	429a      	cmp	r2, r3
 8002816:	d802      	bhi.n	800281e <HAL_SPI_TransmitReceive+0x33a>
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3301      	adds	r3, #1
 800281c:	d102      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x340>
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002824:	2323      	movs	r3, #35	; 0x23
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
        goto error;
 800282c:	e01b      	b.n	8002866 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d19d      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x290>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2246      	movs	r2, #70	; 0x46
 800283c:	5a9b      	ldrh	r3, [r3, r2]
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d197      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f94c 	bl	8002ae8 <SPI_EndRxTxTransaction>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d007      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002854:	2323      	movs	r3, #35	; 0x23
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	661a      	str	r2, [r3, #96]	; 0x60
 8002862:	e000      	b.n	8002866 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002864:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	225d      	movs	r2, #93	; 0x5d
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	225c      	movs	r2, #92	; 0x5c
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002876:	2323      	movs	r3, #35	; 0x23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b00a      	add	sp, #40	; 0x28
 8002882:	bd80      	pop	{r7, pc}
 8002884:	ffffefff 	.word	0xffffefff

08002888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002898:	f7fe f968 	bl	8000b6c <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028a8:	f7fe f960 	bl	8000b6c <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	015b      	lsls	r3, r3, #5
 80028b6:	0d1b      	lsrs	r3, r3, #20
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	4353      	muls	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028be:	e058      	b.n	8002972 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	d055      	beq.n	8002972 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c6:	f7fe f951 	bl	8000b6c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d902      	bls.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d142      	bne.n	8002962 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	21e0      	movs	r1, #224	; 0xe0
 80028e8:	438a      	bics	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	2382      	movs	r3, #130	; 0x82
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d113      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x98>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	429a      	cmp	r2, r3
 8002902:	d005      	beq.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2140      	movs	r1, #64	; 0x40
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	019b      	lsls	r3, r3, #6
 8002928:	429a      	cmp	r2, r3
 800292a:	d110      	bne.n	800294e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	491a      	ldr	r1, [pc, #104]	; (80029a0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	0189      	lsls	r1, r1, #6
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	225d      	movs	r2, #93	; 0x5d
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	225c      	movs	r2, #92	; 0x5c
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e017      	b.n	8002992 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3b01      	subs	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	425a      	negs	r2, r3
 8002982:	4153      	adcs	r3, r2
 8002984:	b2db      	uxtb	r3, r3
 8002986:	001a      	movs	r2, r3
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d197      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b008      	add	sp, #32
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	20000008 	.word	0x20000008
 80029a0:	ffffdfff 	.word	0xffffdfff

080029a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80029b2:	2317      	movs	r3, #23
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029ba:	f7fe f8d7 	bl	8000b6c <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	18d3      	adds	r3, r2, r3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80029ca:	f7fe f8cf 	bl	8000b6c <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	0013      	movs	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	00da      	lsls	r2, r3, #3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	0d1b      	lsrs	r3, r3, #20
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4353      	muls	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029f0:	e068      	b.n	8002ac4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	23c0      	movs	r3, #192	; 0xc0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d10a      	bne.n	8002a12 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	2117      	movs	r1, #23
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	d055      	beq.n	8002ac4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a18:	f7fe f8a8 	bl	8000b6c <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d902      	bls.n	8002a2e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d142      	bne.n	8002ab4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	21e0      	movs	r1, #224	; 0xe0
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	2382      	movs	r3, #130	; 0x82
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d113      	bne.n	8002a72 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d005      	beq.n	8002a62 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d107      	bne.n	8002a72 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	438a      	bics	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d110      	bne.n	8002aa0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0189      	lsls	r1, r1, #6
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	225d      	movs	r2, #93	; 0x5d
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	225c      	movs	r2, #92	; 0x5c
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e010      	b.n	8002ad6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d18e      	bne.n	80029f2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b00a      	add	sp, #40	; 0x28
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	ffffdfff 	.word	0xffffdfff

08002ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	23c0      	movs	r3, #192	; 0xc0
 8002af8:	0159      	lsls	r1, r3, #5
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	0013      	movs	r3, r2
 8002b02:	2200      	movs	r2, #0
 8002b04:	f7ff ff4e 	bl	80029a4 <SPI_WaitFifoStateUntilTimeout>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d007      	beq.n	8002b1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	2220      	movs	r2, #32
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e027      	b.n	8002b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	0013      	movs	r3, r2
 8002b26:	2200      	movs	r2, #0
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	f7ff fead 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d007      	beq.n	8002b42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	2220      	movs	r2, #32
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e014      	b.n	8002b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	23c0      	movs	r3, #192	; 0xc0
 8002b46:	00d9      	lsls	r1, r3, #3
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	0013      	movs	r3, r2
 8002b50:	2200      	movs	r2, #0
 8002b52:	f7ff ff27 	bl	80029a4 <SPI_WaitFifoStateUntilTimeout>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d007      	beq.n	8002b6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	2220      	movs	r2, #32
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e000      	b.n	8002b6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <__libc_init_array>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2600      	movs	r6, #0
 8002b78:	4d0c      	ldr	r5, [pc, #48]	; (8002bac <__libc_init_array+0x38>)
 8002b7a:	4c0d      	ldr	r4, [pc, #52]	; (8002bb0 <__libc_init_array+0x3c>)
 8002b7c:	1b64      	subs	r4, r4, r5
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	42a6      	cmp	r6, r4
 8002b82:	d109      	bne.n	8002b98 <__libc_init_array+0x24>
 8002b84:	2600      	movs	r6, #0
 8002b86:	f000 f821 	bl	8002bcc <_init>
 8002b8a:	4d0a      	ldr	r5, [pc, #40]	; (8002bb4 <__libc_init_array+0x40>)
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <__libc_init_array+0x44>)
 8002b8e:	1b64      	subs	r4, r4, r5
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	42a6      	cmp	r6, r4
 8002b94:	d105      	bne.n	8002ba2 <__libc_init_array+0x2e>
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	00b3      	lsls	r3, r6, #2
 8002b9a:	58eb      	ldr	r3, [r5, r3]
 8002b9c:	4798      	blx	r3
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	e7ee      	b.n	8002b80 <__libc_init_array+0xc>
 8002ba2:	00b3      	lsls	r3, r6, #2
 8002ba4:	58eb      	ldr	r3, [r5, r3]
 8002ba6:	4798      	blx	r3
 8002ba8:	3601      	adds	r6, #1
 8002baa:	e7f2      	b.n	8002b92 <__libc_init_array+0x1e>
 8002bac:	08002c14 	.word	0x08002c14
 8002bb0:	08002c14 	.word	0x08002c14
 8002bb4:	08002c14 	.word	0x08002c14
 8002bb8:	08002c18 	.word	0x08002c18

08002bbc <memset>:
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	1882      	adds	r2, r0, r2
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <memset+0xa>
 8002bc4:	4770      	bx	lr
 8002bc6:	7019      	strb	r1, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	e7f9      	b.n	8002bc0 <memset+0x4>

08002bcc <_init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr

08002bd8 <_fini>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr
